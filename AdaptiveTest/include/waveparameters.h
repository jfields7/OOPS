#ifndef WAVE_PARAMETERS_H
#define WAVE_PARAMETERS_H

#include <parameters.h>

#include <types.h>
#include <string>

// DO NOT MODIFY - This file is automatically generated during compilation.

class WaveParameters : public Parameters {
  public:
    enum InitialConditions{
      GAUSSIAN,
      SINE,
    };

    WaveParameters() : Parameters(1){
      mInitialConditions = GAUSSIAN;
      mGaussianSigma = 0.125;
      mGridPoints = 101;
      mKOSigma = 0.0;
      mGaussianAmplitude = 1.0;
      mErrorTolerance = 1e-06;
      mMinCFL = 0.1;
      mMaxCFL = 0.75;
    }

    inline void setInitialConditions(InitialConditions val){
      mInitialConditions = val;
    }

    inline InitialConditions getInitialConditions(){
      return mInitialConditions;
    }

    inline void setGaussianSigma(double GaussianSigma){
      mGaussianSigma = GaussianSigma;
    }

    inline double getGaussianSigma(){
      return mGaussianSigma;
    }

    inline void setGridPoints(int GridPoints){
      mGridPoints = GridPoints;
    }

    inline int getGridPoints(){
      return mGridPoints;
    }

    inline void setKOSigma(double KOSigma){
      mKOSigma = KOSigma;
    }

    inline double getKOSigma(){
      return mKOSigma;
    }

    inline void setGaussianAmplitude(double GaussianAmplitude){
      mGaussianAmplitude = GaussianAmplitude;
    }

    inline double getGaussianAmplitude(){
      return mGaussianAmplitude;
    }

    inline void setErrorTolerance(double ErrorTolerance){
      mErrorTolerance = ErrorTolerance;
    }

    inline double getErrorTolerance(){
      return mErrorTolerance;
    }

    inline void setMinCFL(double MinCFL){
      mMinCFL = MinCFL;
    }

    inline double getMinCFL(){
      return mMinCFL;
    }

    inline void setMaxCFL(double MaxCFL){
      mMaxCFL = MaxCFL;
    }

    inline double getMaxCFL(){
      return mMaxCFL;
    }

  private:
    InitialConditions mInitialConditions;
    double mGaussianSigma;
    int mGridPoints;
    double mKOSigma;
    double mGaussianAmplitude;
    double mErrorTolerance;
    double mMinCFL;
    double mMaxCFL;
};

#endif
